"""
Django settings for AutomationPlatform project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'r5ufszr@ck2%=db5^__f-jh9q04&s4g^!g)#nns9!f9h=tiz$s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'DjangoRESTFramework.apps.DjangorestframeworkConfig',
    'rest_framework'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'AutomationPlatform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AutomationPlatform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

REST_FRAMEWORK = {

    # Token全局认证配置
    "DEFAULT_AUTHENTICATION_CLASSES": [
        'DjangoRESTFramework.RestFrameworkConfig.UserToken.Authtication'],
    "UNAUTHENTICATED_USER": None,  # 设置匿名用户的用户名, 默认为 AnonymousUser, 使用 request.user 查看
    "UNAUTHENTICATED_TOKEN": None,  # 设置匿名用户的 token, 默认为 None, 使用 request.auth 查看

    # 权限全局认证配置
    "DEFAULT_PERMISSION_CLASSES": [
        'DjangoRESTFramework.RestFrameworkConfig.UserPermissions.AdminPermissions'],

    # 用户登录访问频率全局配置
    "DEFAULT_THROTTLE_CLASSES": ['DjangoRESTFramework.RestFrameworkConfig.UserThrottle.UserThrottle'],
    # 用户登录访问频率次数限制(一分钟10次)
    "DEFAULT_THROTTLE_RATES": {"DjangoRESTFramework": '10/m'},

    # 解析前端传过来的Json数据格式 *且只支持Json *且数据以赋值request.data
    "DEFAULT_PARSER_CLASSES": ["rest_framework.parsers.JSONParser"],

    # 将Response渲染成Json返回
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],

}

BASE_LOG_DIR = os.path.join(BASE_DIR, "DjangoRESTFrameworkLog")    # 配置日志的存放路径(根目录log文件夹下)
LOGGING = {
    'version': 1,   # 保留字,未用到的
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志实例(django自带的报错),一般不禁用.
    'formatters': {     # 定义日志的格式
        'standard': {   # 标准的日志格式
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        'simple': {     # 简单的日志格式
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        'collect': {    # 搜集,自定义的debug字段
            'format': '%(message)s'
        }
    },
    'filters': {    # 定义日志的过滤器
        'require_debug_true': {      # 只有在setting中的 DEBUG = True 的时候才会生效
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {   # 日志的处理程序

        'console': {    # 终端
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'info': {     # 根据文件的大小自动切割
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，根据文件大小自动切
            'filename': os.path.join(BASE_LOG_DIR, "log_info"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M(最好不要超过1G)
            'backupCount': 3,  # 备份数为3,保证路径下只有3个日志  xx.DjangoRESTFrameworkLog --> xx.DjangoRESTFrameworkLog.1 -->
            # xx.DjangoRESTFrameworkLog.2 --> xx.DjangoRESTFrameworkLog.3
            'formatter': 'standard',    # 日志格式(上边的 标准/简单/搜集)
            'encoding': 'utf-8',    # 文件记录的编码格式
        },
        'error': {  # 只记录错误日志
            'level': 'ERROR',    # 级别
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "log_error"),  # 日志文件
            'maxBytes': 1024 * 1024 * 5,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
    },
    'loggers': {    # 日志实例
        '': {  # 默认的logger应用如下配置
            'handlers': ['info', 'error', 'console'],  # 上线之后可以把'console'移除
            'level': 'DEBUG',
            'propagate': True,  # 是否向上一级logger实例传递日志信息
        },

    },
}